function [solution, score, alternativeScores] = ahpPlus(criteriaWeights, alternativeCriteriaRates)

% analytic hierarchy process - modified
% criteriaWeights: array of the criterias' weights -> array[criteriaNum] =
% criteria weight
% alternativeCriteriaRates: array[alternative number] = (array[criteriaNum] =
% alternative rate)
% returns - number of selected alternative

    % get numbers of criterias and alternatives
    criteriaNum = size(criteriaWeights, 2);
    alternativeNum = size(alternativeCriteriaRates, 1);

    % array[criteria] = array[alternativeNum] = counted weight (rows - w^i) 
    criteriaAlternativeScoreMatrix = zeros(criteriaNum, alternativeNum);

    % STAGE 1 - iterate on criterias and calculate alternative rates
    for criteria = 1:criteriaNum    

        pairComparisonMatrix = zeros(alternativeNum, alternativeNum);

        % fill the pair comparison matrix
        for alternative1 = 1:alternativeNum
            for alternative2 = 1:alternativeNum
                
                % get alternatives' rates on current criteria
                rate1 = alternativeCriteriaRates(alternative1, criteria);         
                rate2 = alternativeCriteriaRates(alternative2, criteria);

                rate = rate1 / rate2;

                pairComparisonMatrix(alternative1, alternative2) = rate;

            end
        end

        % matrix normalization
        for alternative = 1:alternativeNum
                          
            sum = 0;
            for row = 1:alternativeNum
                sum = sum + pairComparisonMatrix(row, alternative);
            end

            for row = 1:alternativeNum
                pairComparisonMatrix(row, alternative) = pairComparisonMatrix(row, alternative) / sum;
            end
        end
        
        %find score by criteria for alternatives
        for alternative = 1:alternativeNum

            alternativeVector = pairComparisonMatrix(alternative, :);

            score = mean(alternativeVector);

            criteriaAlternativeScoreMatrix(criteria, alternative) = score;
        end        
    end

    % STAGE 2 - create b-matrixes for criterias

    criteriaBMatrixes = containers.Map('KeyType','int32','ValueType','any');

    for criteria = 1:criteriaNum

        bMatrix = zeros(alternativeNum, alternativeNum, 2);

        for alternative1 = 1:alternativeNum
            for alternative2 = 1:alternativeNum

                score1 = criteriaAlternativeScoreMatrix(criteria, alternative1);
                score2 = criteriaAlternativeScoreMatrix(criteria, alternative2);

                sum = score1 + score2;

                normScore1 = score1 / sum;
                normScore2 = score2 / sum;

                bMatrix(alternative1, alternative2, 1) = normScore1;
                bMatrix(alternative1, alternative2, 2) = normScore2;  

            end
        end

        criteriaBMatrixes(criteria) = bMatrix;

    end

    % STAGE 3 - create common W-matrix

    wMatrix = zeros(alternativeNum, alternativeNum, 2);

    for alternative1 = 1:alternativeNum
        for alternative2 = 1:alternativeNum

            sum1 = 0;
            sum2 = 0;

            for criteria = 1:criteriaNum

                bMatrix = criteriaBMatrixes(criteria);

                alternateScore1 = bMatrix(alternative1, alternative2, 1);
                alternateScore2 = bMatrix(alternative1, alternative2, 2);

                criteriaWeight = criteriaWeights(criteria);

                sum1 = sum1 + criteriaWeight * alternateScore1;
                sum2 = sum2 + criteriaWeight * alternateScore2;
            end               

            wMatrix(alternative1, alternative2, 1) = sum1;
            wMatrix(alternative1, alternative2, 2) = sum2;

        end
    end
    
    % STAGE 4 - count global alternative scores 

    alternativeScores = zeros(1, alternativeNum); 
    scoreSum = 0;

    for alternative1 = 1:alternativeNum
        sum = 0;

        for alternative2 = 1:alternativeNum
            
            sum = sum + wMatrix(alternative1, alternative2, 1);

        end

        alternativeScores(alternative1) = sum;
        scoreSum = scoreSum + sum;
    end

    scoreSum = sum(alternativeScores);

    alternativeScores = alternativeScores / scoreSum;


    [score, solution] = max(alternativeScores);
       
    % 
    % for alternative = 1:alternativeNum
    % 
    %     score = 0;
    % 
    %     for criteria = 1:criteriaNum
    %         score = score + criteriaAlternativeWeightVectorArray(criteria, alternative);
    %     end
    % 
    %     alternativeScores(alternative) = score;
    % end



    %disp(alternativeScores);   
end